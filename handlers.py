import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from buttons import *
from cart import create_id_dish, user_cart, cart_cr, clear_cart, compiration_prices, total
from config import admins_IDS
from data import add_dish_cat_to_base, get_all_categories, add_dish_to_base, get_cat_list, get_dish_with_type, \
    set_min_order, get_min_order, get_all_dishes, get_dish_list, remove_dish, remove_cat, \
    save_subscribe_id, get_subscribes_id, set_discount, get_discount, get_dish, get_sale, edit_sale

from main import dp, bot

info_about_new_dish = []
info_about_new_order = {}
about_order = {}
new_message = []


class expenses(StatesGroup):
    count = State()
    title = State()


class get_info_about_order(StatesGroup):
    person_name = State()
    person_number = State()
    person_adres = State()
    person_payment = State()
    order_comment = State()


class add_dish(StatesGroup):
    title_dish = State()
    category_dish = State()
    price_dish = State()
    structure_dish = State()
    weight_dish = State()
    photo_dish = State()


class Sale(StatesGroup):
    edit = State()


class add_cats(StatesGroup):
    title = State()


class create_message(StatesGroup):
    message = State()
    photo = State()


class discount_st(StatesGroup):
    coast = State()


class min_order(StatesGroup):
    price = State()


@dp.message_handler(commands=['start'])  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def start_message(message: types.message):
    print('–∞–ª–ª–æ')
    info_about_new_dish.clear()
    await save_subscribe_id(str(message.from_id))
    await get_subscribes_id()
    for ids in admins_IDS:
        if message.from_id == int(ids):  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
            await message.answer(text='–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.', reply_markup=admin_buttons)
            break
    else:
        await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ø–∫–æ—Ä–µ–∫!\n'
                                  f'–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É!\n'
                                  f'-–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ —á–µ—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞.\n'
                                  f'-–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {await get_min_order()} RUB.\n'
                                  f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n'
                                  f'–í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É +79108859900\n'
                                  f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é."',
                             reply_markup=main)


@dp.message_handler()
async def worked_with_buttons(message: types.Message, state: FSMContext):
    cats = await get_cat_list()
    dishes = await get_dish_list()
    answer = message.text
    if answer == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∏–¥–∫—É':
        if await get_discount() > 0:
            await message.answer(text=f'–°–µ–π—á–∞—Å –í–ö–õ–Æ–ß–ï–ù–ê —Å–∫–∏–¥–∫–∞ {await get_discount()}%\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –ù–û–í–´–ô –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:\n'
                                      '–ß—Ç–æ–±—ã –í–´–ö–õ–Æ–ß–ò–¢–¨ —Å–∫–∏–¥–∫—É –≤–≤–µ–¥–∏—Ç–µ 0', reply_markup=main_btn)
            await discount_st.coast.set()
        else:
            await message.answer(text=f'–°–µ–π—á–∞—Å —Å–∫–∏–¥–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê\n'
                                      '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏:\n', reply_markup=main_btn)
            await discount_st.coast.set()
    if answer == '–ú–∞–≥–∞–∑–∏–Ωüõç' or answer == '<< –í–µ—Ä–Ω—É—Ç—å—Å—è':
        await get_all_categories('user')
        await message.answer(text='–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', reply_markup=cat_list)
    if answer == '–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π':
        await message.answer(text=f'–í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n'
                                  '–ß–¢–û –ë–´ –£–î–ê–õ–ò–¢–¨ –ö–ê–¢–ï–ì–û–†–ò–Æ, –ù–ê–ñ–ú–ò –ù–ê –ù–ï–Å',
                             reply_markup=await get_all_categories('admin'))
    if answer == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:')
        await add_cats.title.set()
    if answer == '–ê–∫—Ü–∏–∏':
        if str(message.from_user.id) in admins_IDS:
            await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ü–∏—è—Ö —Å–µ–π—á–∞—Å:\n\n'
                                 f'{await get_sale()}\n\n'
                                 f'–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥', reply_markup=main_btn)
            await Sale.edit.set()
        else:
            await message.answer(text=await get_sale(),reply_markup=main)
    if '–ü–æ–º–æ—â—å' in answer:
        await message.answer(f'–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n'
                             f'https://t.me/AnastasiaS1501',reply_markup=main)
    if answer == '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—Ä–æ–¥—É':
        for ids in admins_IDS:
            if message.from_id == int(ids):
                await message.answer(text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ', reply_markup=main_btn)
                await create_message.message.set()
    if answer == '–ù–∞–∑–∞–¥':
        await state.finish()
        for ids in admins_IDS:
            admin_dishes_buttons.clean()
            if message.from_id == int(ids):  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                await message.answer(text='–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.', reply_markup=admin_buttons)
                break
        else:
            await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ø–∫–æ—Ä–µ–∫!"\n'
                                      f'–° –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É!\n'
                                      f'-–î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ —á–µ—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞.\n'
                                      f'-–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {await get_min_order()} RUB.\n'
                                      f'–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n'
                                      f'–í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É +79108859900\n'
                                      f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é."',
                                 reply_markup=main)  # type: ignore
    if answer == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=main_btn)
        await add_dish.title_dish.set()
    if answer in cats:
        dishes_u = await get_dish_with_type(answer)
        if str(message.from_id) in admins_IDS:
            await remove_cat(answer)
            await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {answer} —É–¥–∞–ª–µ–Ω–∞!', reply_markup=await get_all_categories('admin'))
        else:
            dishes_lst = []
            count_dish = 0
            for key, value in dishes_u.items():
                dishes_lst.append(key)
                count_dish += 1

            else:
                if count_dish == 0:
                    await message.answer(f'–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:(\n'
                                         f'–ù–æ –º—ã –∏—Å–ø—Ä–∞–≤–∏–º—Å—è, –ø—Ä–∞–≤–¥–∞.',
                                         reply_markup=await get_all_categories('user'))
                else:
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:', reply_markup=await user_dishes_buttons(dishes_lst))
    if '–ö–æ—Ä–∑–∏–Ω–∞' in answer:
        cart_result = await cart_cr(message.from_user.id)
        if cart_result is False:
            await message.answer(text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', reply_markup=main)
    if answer in dishes:
        if str(message.from_id) in admins_IDS:
            await remove_dish(answer)
            await message.answer(text=f'–¢–æ–≤–∞—Ä {answer} —É–¥–∞–ª–µ–Ω!', reply_markup=await get_all_dishes())
        else:
            print('–ü–æ–∫–∞–∑ –ø–æ–∑–∏—Ü–∏–∏')
            dish_info = await get_dish(answer)
            add_but = InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_{dish_info[0][0]}')
            add_to_cart = InlineKeyboardMarkup().add(add_but)
            if await get_discount() <= 0:
                await message.answer(text=f'{dish_info[0][1]}', reply_markup=back_cat)
                await message.answer_photo(photo=dish_info[0][7], caption=f'–°–æ—Å—Ç–∞–≤:{dish_info[0][5]}\n'
                                                                          f'–í–µ—Å/–û–±—ä—ë–º:{dish_info[0][6]}\n'
                                                                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å:{dish_info[0][4]} RUB\n',
                                           reply_markup=add_to_cart)
            else:
                discount = await get_discount()
                await message.answer(text=f'{dish_info[0][1]}', reply_markup=back_cat)
                await message.answer_photo(photo=dish_info[0][7], caption=f'–°–æ—Å—Ç–∞–≤:{dish_info[0][5]}\n'
                                                                          f'–í–µ—Å/–û–±—ä—ë–º:{dish_info[0][6]}\n'
                                                                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å:{round(float(dish_info[0][4]) * (1 - discount / 100), 2)} RUB\n',
                                           reply_markup=add_to_cart)

    if answer == '–û—Ñ–æ—Ä–º–∏—Ç—å':
        if await compiration_prices(message.from_user.id):
            await bot.send_message(chat_id=message.from_user.id, text='–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è:',
                                   reply_markup=main_btn)
            await get_info_about_order.person_name.set()
        else:
            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {await get_min_order()} RUB',
                                   reply_markup=order_btn)
    if answer == '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
        await clear_cart(message.from_id)
        await get_all_categories('user')
        await message.answer(text='–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!', reply_markup=cat_list)
    if answer == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        await send_order_to_restouran(info_about_new_order, about_order, message.from_user.id)
        await clear_cart(message.from_user.id)
        await bot.send_message(chat_id=message.from_user.id,
                               text='–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n–ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞!\n–ß—Ç–æ –±—ã —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.',
                               reply_markup=main)  # type: ignore
    if answer == '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑':
        for ids in admins_IDS:
            if message.from_id == int(ids):
                await message.answer(text=f'–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–ê–Ø –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ {await get_min_order()} RUB\n'
                                          f'–í–≤–µ–¥–∏—Ç–µ –ù–û–í–£–Æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ RUB: ', reply_markup=main_btn)
                await min_order.price.set()
    if answer == 'C–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤':
        for ids in admins_IDS:
            if message.from_id == int(ids):
                await get_all_dishes()
                await message.answer(text=f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: \n'
                                          f'–ß–¢–û –ë–´ –£–î–ê–õ–ò–¢–¨ –¢–û–í–ê–†, –ù–ê–ñ–ú–ò –ù–ê –ù–ï–ì–û!', reply_markup=await get_all_dishes())


@dp.message_handler(state=Sale.edit)
async def edit_sale_fc(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer(text='–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.', reply_markup=admin_buttons)
        await state.finish()
    else:
        await edit_sale(await get_sale(), message.text)
        await message.answer(text=f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–π', reply_markup=admin_buttons)
        await state.finish()


@dp.message_handler(state=expenses.count)
async def create_message_text(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await message.answer(text='–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.', reply_markup=admin_buttons)
        await state.finish()
    else:
        if ',' in answer:
            answer = answer.replace(',', '.')
        await state.update_data(count=float(answer))
        await message.answer(f'–°—É–º–º–∞ {answer} RUB –≤–≤–µ–¥–µ–Ω–∞.\n'
                             f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:', reply_markup=main_btn)
        await expenses.title.set()


@dp.message_handler(state=expenses.title)
async def create_message_text(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –°–£–ú–ú–£:', reply_markup=main_btn)
        await expenses.count.set()
    else:
        await state.update_data(title=answer)
        data = await state.get_data()
        await add_expense(data)  # type: ignore
        await message.answer(f'–ü–æ–ª—É—á–∞–µ—Ç—Å—è –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {data["count"]} RUB –Ω–∞ {data["title"]}?\n'
                             f'–ù–∞–º –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ', reply_markup=admin_buttons)
        await state.finish()


@dp.message_handler(state=create_message.message)
async def create_message_text(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        new_message.append(answer)
        await message.answer(text='–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞: ', reply_markup=main_btn)
        await create_message.photo.set()


@dp.message_handler(content_types=['photo'], state=create_message.photo)
async def create_message_photo(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        answer = message.photo[0].file_id
        new_message.append(answer)
        await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n'
                                  f'–ü–æ–ª—É—á–∏–ª–æ {await send_messages_subscribes(new_message)} —á–µ–ª–æ–≤–µ–∫(–∞)!',
                             reply_markup=main_btn)
        print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {await send_messages_subscribes(new_message)} —á–µ–ª–æ–≤–µ–∫(–∞)')
        new_message.clear()
        await state.finish()


@dp.message_handler(state=min_order.price)
async def deli_price_set(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        await set_min_order(answer)
        await message.answer(text=f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Ç–µ–ø–µ—Ä—å {answer} RUB', reply_markup=admin_buttons)
        print(f'–ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ {answer} RUB')
        await state.finish()


@dp.message_handler(state=discount_st.coast)
async def discount_set(message: types.Message, state: FSMContext):
    lst_discount = []
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    elif int(answer) > 0:
        lst_discount.append('yes')
        lst_discount.append(answer)
        await message.answer(text=f'–°–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {answer}% –í–ö–õ–Æ–ß–ï–ù–ê!', reply_markup=admin_buttons)
        await set_discount(lst_discount)
        print(f'–í–∫–ª—é—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {answer} %')
        await state.finish()
    else:
        lst_discount.append('no')
        lst_discount.append(answer)
        await message.answer(text=f'–°–∫–∏–¥–∫–∞ –í–´–ö–õ–Æ–ß–ï–ù–ê!', reply_markup=admin_buttons)
        await set_discount(lst_discount)
        print('–í—ã–∫–ª—é—á–µ–Ω–∞ —Å–∫–∏–¥–∫–∞')
        await state.finish()


@dp.message_handler(state=add_cats.title)
async def add_category(message: types.Message, state: FSMContext):
    answer = message.text
    await add_dish_cat_to_base(answer)
    await message.answer(text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {answer} –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=admin_buttons)
    await state.finish()


@dp.message_handler(state=add_dish.title_dish)
async def add_dish_name(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        info_about_new_dish.append(answer)
        await get_all_categories('admin')
        await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await get_all_categories('admin'))
        await add_dish.category_dish.set()


@dp.message_handler(state=add_dish.category_dish)
async def add_dish_cat(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        info_about_new_dish.append(answer)
        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å RUB', reply_markup=main_btn)
        await add_dish.price_dish.set()


@dp.message_handler(state=add_dish.price_dish)
async def add_dish_price(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        info_about_new_dish.append(answer)
        await message.answer(text=f'–°–æ—Å—Ç–∞–≤:', reply_markup=main_btn)
        await add_dish.structure_dish.set()


@dp.message_handler(state=add_dish.structure_dish)
async def add_dish_structure(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        info_about_new_dish.append(answer)
        await message.answer(text=f'–í–µ—Å:', reply_markup=main_btn)
        await add_dish.weight_dish.set()


@dp.message_handler(state=add_dish.weight_dish)
async def add_dish_weight(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        info_about_new_dish.append(answer)
        await message.answer(text=f'–ê —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ:', reply_markup=main_btn)
        await add_dish.photo_dish.set()


@dp.message_handler(content_types=['photo'], state=add_dish.photo_dish)
async def add_dish_photo(message: types.Message, state: FSMContext):
    answer = message.photo[0].file_id
    info_about_new_dish.append(answer)
    info_about_new_dish.insert(2, 'yes')
    await message.answer(text=f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=admin_buttons)
    await state.finish()
    await add_dish_to_base(info_about_new_dish)
    info_about_new_dish.clear()


@dp.callback_query_handler()
async def callback_process(call: types.CallbackQuery, state: FSMContext):
    await call.answer('–æ–∫')
    print('–•–µ–Ω–¥–ª–µ—Ä')
    if 'add_' in str(call.data):
        print('–î–æ–±–∞–≤–∏–ª–∏')
        cart_btn = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        cart_btn.clean()
        await create_id_dish(str(call.from_user.id), str(call.data))
        cart = KeyboardButton(f'–ö–æ—Ä–∑–∏–Ω–∞({round(user_cart[str(call.from_user.id)]["–ò—Ç–æ–≥"], 2)} RUB)')
        cart_btn.row(cart, back_to_cat, cl_cart)
        await call.answer(text='–î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
        await bot.send_message(chat_id=call.from_user.id, text='–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=cart_btn)
    elif 'accept' in str(call.data):
        order_number = str(call.data)[7:10]
        await bot.send_message(chat_id=call.from_user.id, text=f'–ó–∞–∫–∞–∑ {order_number} –ø–æ—Å—Ç—É–ø–∏–ª –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!')
        await send_order_to_restouran(info_about_new_order, about_order, call.from_user.id)
        await clear_cart(call.from_user.id)
        await call.answer(text='–ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!')
    elif 'invite' in str(call.data):
        await bot.send_message(chat_id=str(call.data)[11:], text=f'–í–∞—à –∑–∞–∫–∞–∑ #{str(call.data)[7:10]} –ø—Ä–∏–Ω—è—Ç!\n'
                                                                 f'–ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!\n'
                                                                 f'–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞!',
                               reply_markup=main)  # type: ignore
        await bot.send_message(chat_id=call.from_user.id, text=f'–í—ã –ü–†–ò–ù–Ø–õ–ò –∑–∞–∫–∞–∑ #{str(call.data)[7:10]}')
        await call.answer(text='–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!')


@dp.callback_query_handler(state=get_info_about_order.order_comment)
async def callback_comment(call: types.CallbackQuery, state: FSMContext):
    if 'No_' in str(call.data):
        info_about_new_order[str(call.from_user.id)]['comment'] = '-'
        await state.finish()
        await call.answer(text='–ü—Ä–∏–Ω—è—Ç–æ')
        # –ü—Ä–µ–¥—á–µ–∫
        order_number = random.randint(100, 999)
        add_butt = InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
                                        callback_data=f'accept_{order_number}_{call.from_user.id}')
        accept_but = InlineKeyboardMarkup().add(add_butt)
        await bot.send_message(chat_id=call.from_user.id,
                               text=f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {order_number}\n{about_order[str(call.from_user.id)]["info"]}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {info_about_new_order[str(call.from_user.id)]["adres"]}\n–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {info_about_new_order[str(call.from_user.id)]["comment"]}',
                               reply_markup=accept_but)
        about_order[str(call.from_user.id)]['order_number'] = order_number


async def create_cart(info, chat_id, total):
    await bot.send_message(chat_id=chat_id, text=f'–í–∞—à –∑–∞–∫–∞–∑:\n{info}', reply_markup=order_btn)
    about_order[str(chat_id)] = {'info': info,
                                 'total': total}


@dp.message_handler(state=get_info_about_order.person_name)
async def get_name(message: types.Message, state: FSMContext):
    answer = message.text
    if answer == '–ù–∞–∑–∞–¥':
        await start_message(message)
        await state.finish()
    else:
        info_about_new_order[str(message.from_user.id)] = {}
        info_about_new_order[str(message.from_user.id)]['name'] = answer
        info_about_new_order[str(message.from_user.id)]['who'] = message.from_user.username
        number_btn = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        number_btn.row(number)
        await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', reply_markup=number_btn)
        await get_info_about_order.person_number.set()


@dp.message_handler(content_types=['contact'], state=get_info_about_order.person_number)
@dp.message_handler(state=get_info_about_order.person_number)
async def get_number(message: types.message, state: FSMContext):
    try:
        answer = message.contact.phone_number
        info_about_new_order[str(message.from_user.id)]['number'] = answer
    except AttributeError:
        answer = message.text
        info_about_new_order[str(message.from_user.id)]['number'] = answer
    await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=main_btn)
    await get_info_about_order.person_adres.set()


@dp.message_handler(state=get_info_about_order.person_adres)
async def get_adres(message: types.Message, state: FSMContext):
    answer = message.text
    comment_butt = InlineKeyboardButton('–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å', callback_data='No_comment')
    comment_but = InlineKeyboardMarkup().add(comment_butt)
    info_about_new_order[str(message.from_user.id)]['adres'] = answer
    await bot.send_message(chat_id=message.from_user.id, text='–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:', reply_markup=comment_but)
    await get_info_about_order.order_comment.set()


@dp.message_handler(state=get_info_about_order.order_comment)
async def get_comment(message: types.Message, state: FSMContext):
    answer = message.text
    info_about_new_order[str(message.from_user.id)]['comment'] = answer
    await state.finish()
    await predcheck(info_about_new_order, message)


async def predcheck(info, message: types.Message):
    order_number = random.randint(100, 999)
    add_butt = InlineKeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'accept_{order_number}_{message.from_user.id}')
    accept_but = InlineKeyboardMarkup().add(add_butt)
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {order_number}\n{about_order[str(message.from_user.id)]["info"]}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {info[str(message.from_user.id)]["adres"]}\n–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {info[str(message.from_user.id)]["comment"]}',
                           reply_markup=accept_but)
    about_order[str(message.from_user.id)]['order_number'] = order_number


async def send_order_to_restouran(contact, order, person_id):
    for id in admins_IDS:
        invite_butt = InlineKeyboardButton(f'–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ {order[str(person_id)]["order_number"]}!',
                                           callback_data=f'invite_{order[str(person_id)]["order_number"]}_{person_id}')
        invite_but = InlineKeyboardMarkup().add(invite_butt)
        await bot.send_message(chat_id=id, text=f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order[str(person_id)]["order_number"]} !\n'
                                                f'{order[str(person_id)]["info"]}\n'
                                                f'–ì–æ—Å—Ç—å : {contact[str(person_id)]["name"]}\n'
                                                f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ : {contact[str(person_id)]["adres"]}\n'
                                                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ : {contact[str(person_id)]["number"]}\n'
                                                f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {contact[str(person_id)]["comment"]}\n'
                                                f'Username: {contact[str(person_id)]["who"]}',
                               reply_markup=invite_but)
        print(f'–ü—Ä–∏—à—ë–ª –∑–∞–∫–∞–∑!')
    else:
        del about_order[str(person_id)]
        del info_about_new_order[str(person_id)]


async def send_messages_subscribes(list):
    count_sub = 0
    for id in await get_subscribes_id():
        await bot.send_photo(chat_id=id, photo=list[1], caption=list[0])
        count_sub += 1
    else:
        return count_sub
